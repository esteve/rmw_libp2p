/* automatically generated by rust-bindgen 0.69.4 */

pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type rcutils_ret_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_allocator_s {
    pub allocate: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub deallocate: ::std::option::Option<
        unsafe extern "C" fn(
            pointer: *mut ::std::os::raw::c_void,
            state: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reallocate: ::std::option::Option<
        unsafe extern "C" fn(
            pointer: *mut ::std::os::raw::c_void,
            size: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub zero_allocate: ::std::option::Option<
        unsafe extern "C" fn(
            number_of_elements: usize,
            size_of_element: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub state: *mut ::std::os::raw::c_void,
}
pub type rcutils_allocator_t = rcutils_allocator_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_array_list_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_array_list_s {
    pub impl_: *mut rcutils_array_list_impl_s,
}
pub type rcutils_array_list_t = rcutils_array_list_s;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_char_array_s {
    pub buffer: *mut ::std::os::raw::c_char,
    pub owns_buffer: bool,
    pub buffer_length: usize,
    pub buffer_capacity: usize,
    pub allocator: rcutils_allocator_t,
}
pub type rcutils_char_array_t = rcutils_char_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_hash_map_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_hash_map_s {
    pub impl_: *mut rcutils_hash_map_impl_s,
}
pub type rcutils_hash_map_t = rcutils_hash_map_s;
pub type rcutils_hash_map_key_hasher_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> usize>;
pub type rcutils_hash_map_key_cmp_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_error_string_s {
    pub str_: [::std::os::raw::c_char; 1024usize],
}
pub type rcutils_error_string_t = rcutils_error_string_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_error_state_s {
    pub message: [::std::os::raw::c_char; 768usize],
    pub file: [::std::os::raw::c_char; 229usize],
    pub line_number: u64,
}
pub type rcutils_error_state_t = rcutils_error_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_array_s {
    pub size: usize,
    pub data: *mut *mut ::std::os::raw::c_char,
    pub allocator: rcutils_allocator_t,
}
pub type rcutils_string_array_t = rcutils_string_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_map_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_map_s {
    pub impl_: *mut rcutils_string_map_impl_s,
}
pub type rcutils_string_map_t = rcutils_string_map_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_uint8_array_s {
    pub buffer: *mut u8,
    pub buffer_length: usize,
    pub buffer_capacity: usize,
    pub allocator: rcutils_allocator_t,
}
pub type rcutils_uint8_array_t = rcutils_uint8_array_s;
pub type rosidl_message_typesupport_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_message_type_support_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_message_type_support_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_message_type_support_t {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_message_typesupport_handle_function,
}
pub type rosidl_service_typesupport_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_service_type_support_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_service_type_support_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_service_type_support_t {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_service_typesupport_handle_function,
}
pub type rosidl_runtime_c__bound_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_runtime_c__Sequence__bound,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_runtime_c__Sequence__bound,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_runtime_c__Sequence__bound {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_runtime_c__bound_handle_function,
}
pub type rcutils_time_point_value_t = i64;
pub type rcutils_duration_value_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_log_location_s {
    pub function_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub line_number: usize,
}
pub type rcutils_log_location_t = rcutils_log_location_s;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_UNSET: RCUTILS_LOG_SEVERITY = 0;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_DEBUG: RCUTILS_LOG_SEVERITY = 10;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_INFO: RCUTILS_LOG_SEVERITY = 20;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_WARN: RCUTILS_LOG_SEVERITY = 30;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_ERROR: RCUTILS_LOG_SEVERITY = 40;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_FATAL: RCUTILS_LOG_SEVERITY = 50;
pub type RCUTILS_LOG_SEVERITY = ::std::os::raw::c_uint;
pub type rcutils_logging_output_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rcutils_log_location_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: rcutils_time_point_value_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut va_list,
    ),
>;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_INVALID: rmw_qos_policy_kind_e = 1;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DURABILITY: rmw_qos_policy_kind_e = 2;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DEADLINE: rmw_qos_policy_kind_e = 4;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIVELINESS: rmw_qos_policy_kind_e = 8;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_RELIABILITY: rmw_qos_policy_kind_e = 16;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_HISTORY: rmw_qos_policy_kind_e = 32;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIFESPAN: rmw_qos_policy_kind_e = 64;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DEPTH: rmw_qos_policy_kind_e = 128;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIVELINESS_LEASE_DURATION: rmw_qos_policy_kind_e =
    256;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_AVOID_ROS_NAMESPACE_CONVENTIONS:
    rmw_qos_policy_kind_e = 512;
pub type rmw_qos_policy_kind_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_policy_kind_e as rmw_qos_policy_kind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_qos_incompatible_event_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
    pub last_policy_kind: rmw_qos_policy_kind_t,
}
pub type rmw_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_s;
pub type rmw_requested_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_t;
pub type rmw_offered_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_liveliness_changed_status_s {
    pub alive_count: i32,
    pub not_alive_count: i32,
    pub alive_count_change: i32,
    pub not_alive_count_change: i32,
}
pub type rmw_liveliness_changed_status_t = rmw_liveliness_changed_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_liveliness_lost_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
pub type rmw_liveliness_lost_status_t = rmw_liveliness_lost_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_lost_status_s {
    pub total_count: usize,
    pub total_count_change: usize,
}
pub type rmw_message_lost_status_t = rmw_message_lost_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_offered_deadline_missed_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
pub type rmw_offered_deadline_missed_status_t = rmw_offered_deadline_missed_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_requested_deadline_missed_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
pub type rmw_requested_deadline_missed_status_t = rmw_requested_deadline_missed_status_s;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_DEFAULT: rmw_localhost_only_e = 0;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_ENABLED: rmw_localhost_only_e = 1;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_DISABLED: rmw_localhost_only_e = 2;
pub type rmw_localhost_only_e = ::std::os::raw::c_uint;
pub use self::rmw_localhost_only_e as rmw_localhost_only_t;
pub type rmw_ret_t = i32;
pub const rmw_security_enforcement_policy_e_RMW_SECURITY_ENFORCEMENT_PERMISSIVE:
    rmw_security_enforcement_policy_e = 0;
pub const rmw_security_enforcement_policy_e_RMW_SECURITY_ENFORCEMENT_ENFORCE:
    rmw_security_enforcement_policy_e = 1;
pub type rmw_security_enforcement_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_security_enforcement_policy_e as rmw_security_enforcement_policy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_security_options_s {
    pub enforce_security: rmw_security_enforcement_policy_t,
    pub security_root_path: *mut ::std::os::raw::c_char,
}
pub type rmw_security_options_t = rmw_security_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_init_options_impl_s {
    _unused: [u8; 0],
}
pub type rmw_init_options_impl_t = rmw_init_options_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_init_options_s {
    pub instance_id: u64,
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub domain_id: usize,
    pub security_options: rmw_security_options_t,
    pub localhost_only: rmw_localhost_only_t,
    pub enclave: *mut ::std::os::raw::c_char,
    pub allocator: rcutils_allocator_t,
    pub impl_: *mut rmw_init_options_impl_t,
}
pub type rmw_init_options_t = rmw_init_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_context_impl_s {
    _unused: [u8; 0],
}
pub type rmw_context_impl_t = rmw_context_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_context_s {
    pub instance_id: u64,
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub options: rmw_init_options_t,
    pub actual_domain_id: usize,
    pub impl_: *mut rmw_context_impl_t,
}
pub type rmw_context_t = rmw_context_s;
pub type rmw_serialized_message_t = rcutils_uint8_array_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_content_filter_options_s {
    pub filter_expression: *mut ::std::os::raw::c_char,
    pub expression_parameters: rcutils_string_array_t,
}
pub type rmw_subscription_content_filter_options_t = rmw_subscription_content_filter_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_time_s {
    pub sec: u64,
    pub nsec: u64,
}
pub type rmw_time_t = rmw_time_s;
pub type rmw_time_point_value_t = rcutils_time_point_value_t;
pub type rmw_duration_t = rcutils_duration_value_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_node_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub namespace_: *const ::std::os::raw::c_char,
    pub context: *mut rmw_context_t,
}
pub type rmw_node_t = rmw_node_s;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_INVALID: rmw_endpoint_type_e = 0;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_PUBLISHER: rmw_endpoint_type_e = 1;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_SUBSCRIPTION: rmw_endpoint_type_e = 2;
pub type rmw_endpoint_type_e = ::std::os::raw::c_uint;
pub use self::rmw_endpoint_type_e as rmw_endpoint_type_t;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_NOT_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 0 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_STRICTLY_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 1 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_OPTIONALLY_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 2 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_SYSTEM_DEFAULT : rmw_unique_network_flow_endpoints_requirement_e = 3 ;
pub type rmw_unique_network_flow_endpoints_requirement_e = ::std::os::raw::c_uint;
pub use self::rmw_unique_network_flow_endpoints_requirement_e as rmw_unique_network_flow_endpoints_requirement_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_options_s {
    pub rmw_specific_publisher_payload: *mut ::std::os::raw::c_void,
    pub require_unique_network_flow_endpoints: rmw_unique_network_flow_endpoints_requirement_t,
}
pub type rmw_publisher_options_t = rmw_publisher_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub topic_name: *const ::std::os::raw::c_char,
    pub options: rmw_publisher_options_t,
    pub can_loan_messages: bool,
}
pub type rmw_publisher_t = rmw_publisher_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_options_s {
    pub rmw_specific_subscription_payload: *mut ::std::os::raw::c_void,
    pub ignore_local_publications: bool,
    pub require_unique_network_flow_endpoints: rmw_unique_network_flow_endpoints_requirement_t,
    pub content_filter_options: *mut rmw_subscription_content_filter_options_t,
}
pub type rmw_subscription_options_t = rmw_subscription_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub topic_name: *const ::std::os::raw::c_char,
    pub options: rmw_subscription_options_t,
    pub can_loan_messages: bool,
    pub is_cft_enabled: bool,
}
pub type rmw_subscription_t = rmw_subscription_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_service_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub service_name: *const ::std::os::raw::c_char,
}
pub type rmw_service_t = rmw_service_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_client_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub service_name: *const ::std::os::raw::c_char,
}
pub type rmw_client_t = rmw_client_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_guard_condition_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub context: *mut rmw_context_t,
}
pub type rmw_guard_condition_t = rmw_guard_condition_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_allocation_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type rmw_publisher_allocation_t = rmw_publisher_allocation_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_allocation_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type rmw_subscription_allocation_t = rmw_subscription_allocation_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscriptions_s {
    pub subscriber_count: usize,
    pub subscribers: *mut *mut ::std::os::raw::c_void,
}
pub type rmw_subscriptions_t = rmw_subscriptions_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_services_s {
    pub service_count: usize,
    pub services: *mut *mut ::std::os::raw::c_void,
}
pub type rmw_services_t = rmw_services_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_clients_s {
    pub client_count: usize,
    pub clients: *mut *mut ::std::os::raw::c_void,
}
pub type rmw_clients_t = rmw_clients_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_events_s {
    pub event_count: usize,
    pub events: *mut *mut ::std::os::raw::c_void,
}
pub type rmw_events_t = rmw_events_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_guard_conditions_s {
    pub guard_condition_count: usize,
    pub guard_conditions: *mut *mut ::std::os::raw::c_void,
}
pub type rmw_guard_conditions_t = rmw_guard_conditions_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_wait_set_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub guard_conditions: *mut rmw_guard_conditions_t,
    pub data: *mut ::std::os::raw::c_void,
}
pub type rmw_wait_set_t = rmw_wait_set_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_request_id_s {
    pub writer_guid: [i8; 16usize],
    pub sequence_number: i64,
}
pub type rmw_request_id_t = rmw_request_id_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_service_info_s {
    pub source_timestamp: rmw_time_point_value_t,
    pub received_timestamp: rmw_time_point_value_t,
    pub request_id: rmw_request_id_t,
}
pub type rmw_service_info_t = rmw_service_info_s;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_SYSTEM_DEFAULT:
    rmw_qos_reliability_policy_e = 0;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_RELIABLE:
    rmw_qos_reliability_policy_e = 1;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT:
    rmw_qos_reliability_policy_e = 2;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_UNKNOWN:
    rmw_qos_reliability_policy_e = 3;
pub type rmw_qos_reliability_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_reliability_policy_e as rmw_qos_reliability_policy_t;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT: rmw_qos_history_policy_e =
    0;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_KEEP_LAST: rmw_qos_history_policy_e = 1;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_KEEP_ALL: rmw_qos_history_policy_e = 2;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_UNKNOWN: rmw_qos_history_policy_e = 3;
pub type rmw_qos_history_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_history_policy_e as rmw_qos_history_policy_t;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT:
    rmw_qos_durability_policy_e = 0;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL:
    rmw_qos_durability_policy_e = 1;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_VOLATILE:
    rmw_qos_durability_policy_e = 2;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_UNKNOWN:
    rmw_qos_durability_policy_e = 3;
pub type rmw_qos_durability_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_durability_policy_e as rmw_qos_durability_policy_t;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT:
    rmw_qos_liveliness_policy_e = 0;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_AUTOMATIC:
    rmw_qos_liveliness_policy_e = 1;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE:
    rmw_qos_liveliness_policy_e = 2;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC:
    rmw_qos_liveliness_policy_e = 3;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_UNKNOWN:
    rmw_qos_liveliness_policy_e = 4;
pub type rmw_qos_liveliness_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_liveliness_policy_e as rmw_qos_liveliness_policy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_qos_profile_s {
    pub history: rmw_qos_history_policy_e,
    pub depth: usize,
    pub reliability: rmw_qos_reliability_policy_e,
    pub durability: rmw_qos_durability_policy_e,
    pub deadline: rmw_time_s,
    pub lifespan: rmw_time_s,
    pub liveliness: rmw_qos_liveliness_policy_e,
    pub liveliness_lease_duration: rmw_time_s,
    pub avoid_ros_namespace_conventions: bool,
}
pub type rmw_qos_profile_t = rmw_qos_profile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_gid_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: [u8; 24usize],
}
pub type rmw_gid_t = rmw_gid_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_info_s {
    pub source_timestamp: rmw_time_point_value_t,
    pub received_timestamp: rmw_time_point_value_t,
    pub publication_sequence_number: u64,
    pub reception_sequence_number: u64,
    pub publisher_gid: rmw_gid_t,
    pub from_intra_process: bool,
}
pub type rmw_message_info_t = rmw_message_info_s;
pub const RMW_QOS_POLICY_DEPTH_SYSTEM_DEFAULT: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_DEBUG: rmw_log_severity_t = 10;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_INFO: rmw_log_severity_t = 20;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_WARN: rmw_log_severity_t = 30;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_ERROR: rmw_log_severity_t = 40;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_FATAL: rmw_log_severity_t = 50;
pub type rmw_log_severity_t = ::std::os::raw::c_uint;
pub const rmw_event_type_e_RMW_EVENT_LIVELINESS_CHANGED: rmw_event_type_e = 0;
pub const rmw_event_type_e_RMW_EVENT_REQUESTED_DEADLINE_MISSED: rmw_event_type_e = 1;
pub const rmw_event_type_e_RMW_EVENT_REQUESTED_QOS_INCOMPATIBLE: rmw_event_type_e = 2;
pub const rmw_event_type_e_RMW_EVENT_MESSAGE_LOST: rmw_event_type_e = 3;
pub const rmw_event_type_e_RMW_EVENT_LIVELINESS_LOST: rmw_event_type_e = 4;
pub const rmw_event_type_e_RMW_EVENT_OFFERED_DEADLINE_MISSED: rmw_event_type_e = 5;
pub const rmw_event_type_e_RMW_EVENT_OFFERED_QOS_INCOMPATIBLE: rmw_event_type_e = 6;
pub const rmw_event_type_e_RMW_EVENT_INVALID: rmw_event_type_e = 7;
pub type rmw_event_type_e = ::std::os::raw::c_uint;
pub use self::rmw_event_type_e as rmw_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_event_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub event_type: rmw_event_type_t,
}
pub type rmw_event_t = rmw_event_s;
pub type rmw_event_callback_t = ::std::option::Option<
    unsafe extern "C" fn(user_data: *const ::std::os::raw::c_void, number_of_events: usize),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_sequence_s {
    pub data: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub capacity: usize,
    pub allocator: *mut rcutils_allocator_t,
}
pub type rmw_message_sequence_t = rmw_message_sequence_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_info_sequence_s {
    pub data: *mut rmw_message_info_t,
    pub size: usize,
    pub capacity: usize,
    pub allocator: *mut rcutils_allocator_t,
}
pub type rmw_message_info_sequence_t = rmw_message_info_sequence_s;
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_OK: rmw_qos_compatibility_type_e = 0;
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_WARNING: rmw_qos_compatibility_type_e =
    1;
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_ERROR: rmw_qos_compatibility_type_e =
    2;
pub type rmw_qos_compatibility_type_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_compatibility_type_e as rmw_qos_compatibility_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_names_and_types_s {
    pub names: rcutils_string_array_t,
    pub types: *mut rcutils_string_array_t,
}
pub type rmw_names_and_types_t = rmw_names_and_types_s;
pub const rmw_feature_e_RMW_FEATURE_MESSAGE_INFO_PUBLICATION_SEQUENCE_NUMBER: rmw_feature_e = 0;
pub const rmw_feature_e_RMW_FEATURE_MESSAGE_INFO_RECEPTION_SEQUENCE_NUMBER: rmw_feature_e = 1;
pub type rmw_feature_e = ::std::os::raw::c_uint;
pub use self::rmw_feature_e as rmw_feature_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_topic_endpoint_info_s {
    pub node_name: *const ::std::os::raw::c_char,
    pub node_namespace: *const ::std::os::raw::c_char,
    pub topic_type: *const ::std::os::raw::c_char,
    pub endpoint_type: rmw_endpoint_type_t,
    pub endpoint_gid: [u8; 24usize],
    pub qos_profile: rmw_qos_profile_t,
}
pub type rmw_topic_endpoint_info_t = rmw_topic_endpoint_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_topic_endpoint_info_array_s {
    pub size: usize,
    pub info_array: *mut rmw_topic_endpoint_info_t,
}
pub type rmw_topic_endpoint_info_array_t = rmw_topic_endpoint_info_array_s;
pub const rmw_transport_protocol_e_RMW_TRANSPORT_PROTOCOL_UNKNOWN: rmw_transport_protocol_e = 0;
pub const rmw_transport_protocol_e_RMW_TRANSPORT_PROTOCOL_UDP: rmw_transport_protocol_e = 1;
pub const rmw_transport_protocol_e_RMW_TRANSPORT_PROTOCOL_TCP: rmw_transport_protocol_e = 2;
pub const rmw_transport_protocol_e_RMW_TRANSPORT_PROTOCOL_COUNT: rmw_transport_protocol_e = 3;
pub type rmw_transport_protocol_e = ::std::os::raw::c_uint;
pub use self::rmw_transport_protocol_e as rmw_transport_protocol_t;
pub const rmw_internet_protocol_e_RMW_INTERNET_PROTOCOL_UNKNOWN: rmw_internet_protocol_e = 0;
pub const rmw_internet_protocol_e_RMW_INTERNET_PROTOCOL_IPV4: rmw_internet_protocol_e = 1;
pub const rmw_internet_protocol_e_RMW_INTERNET_PROTOCOL_IPV6: rmw_internet_protocol_e = 2;
pub const rmw_internet_protocol_e_RMW_INTERNET_PROTOCOL_COUNT: rmw_internet_protocol_e = 3;
pub type rmw_internet_protocol_e = ::std::os::raw::c_uint;
pub use self::rmw_internet_protocol_e as rmw_internet_protocol_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_network_flow_endpoint_s {
    pub transport_protocol: rmw_transport_protocol_t,
    pub internet_protocol: rmw_internet_protocol_t,
    pub transport_port: u16,
    pub flow_label: u32,
    pub dscp: u8,
    pub internet_address: [::std::os::raw::c_char; 48usize],
}
pub type rmw_network_flow_endpoint_t = rmw_network_flow_endpoint_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_network_flow_endpoint_array_s {
    pub size: usize,
    pub network_flow_endpoint: *mut rmw_network_flow_endpoint_t,
    pub allocator: *mut rcutils_allocator_t,
}
pub type rmw_network_flow_endpoint_array_t = rmw_network_flow_endpoint_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
